name: GitHub Issue & Project 변경 시 Notion 자동 동기화

on:
  issues:
    types: [opened, edited]
  project_card:
    types: [moved, created, deleted, edited]

jobs:
  notion_issue_update:
    runs-on: ubuntu-latest
    steps:
      - name: GitHub Projects 속성 가져오기
        id: get_project_data
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          else
            ISSUE_NUMBER=$(echo "${{ github.event.project_card.content_url }}" | awk -F "/" '{print $NF}')
          fi

          PROJECTS_API_URL="https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "$PROJECTS_API_URL")

          # GitHub Projects에서 상태(Status) 가져오기
          STATUS=$(echo "$RESPONSE" | jq -r '.state // empty')

          # GitHub Projects에서 우선순위, 크기 가져오기
          PRIORITY=$(echo "$RESPONSE" | jq -r '[.labels[]?.name] | map(select(test("P[0-9]")))[0] // empty')
          SIZE=$(echo "$RESPONSE" | jq -r '[.labels[]?.name] | map(select(test("XS|S|M|L|XL")))[0] // empty')

          # GitHub Projects에서 시작일, 종료일 가져오기
          START_DATE=$(echo "$RESPONSE" | jq -r '.created_at // empty')
          END_DATE=$(echo "$RESPONSE" | jq -r '.closed_at // empty')

          # 값이 "null"이면 빈 문자열로 변경 (Notion에서 빈 값으로 처리)
          [[ "$STATUS" == "null" ]] && STATUS=""
          [[ "$PRIORITY" == "null" ]] && PRIORITY=""
          [[ "$SIZE" == "null" ]] && SIZE=""
          [[ "$START_DATE" == "null" ]] && START_DATE=""
          [[ "$END_DATE" == "null" ]] && END_DATE=""

          echo "PRIORITY=$PRIORITY" >> $GITHUB_ENV
          echo "SIZE=$SIZE" >> $GITHUB_ENV
          echo "STATUS=$STATUS" >> $GITHUB_ENV
          echo "START_DATE=$START_DATE" >> $GITHUB_ENV
          echo "END_DATE=$END_DATE" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      - name: Notion에 Issue 추가 또는 업데이트
        run: |
          # Issue 본문을 JSON 형식으로 변환 (개행 처리)
          ISSUE_BODY=$(echo "${{ github.event.issue.body }}" | jq -Rs '.')

          JSON_PAYLOAD='{
            "parent": { "database_id": "'"${{ secrets.NOTION_DATABASE_ID }}"'" },
            "properties": {
              "이슈명": { "title": [{ "text": { "content": "'"${{ github.event.issue.title }}"'" }}] },
              "Status": { "status": { "name": "'"${{ env.STATUS }}"'" } },
              "우선순위": { "select": { "name": "'"${{ env.PRIORITY }}"'" } },
              "규모": { "select": { "name": "'"${{ env.SIZE }}"'" } },
              "GitHub 이슈": { "url": "'"https://github.com/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}"'" }
            },
            "children": [
              {
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                  "rich_text": [
                    {
                      "type": "text",
                      "text": { "content": '"$ISSUE_BODY"' }
                    }
                  ]
                }
              }
            ]
          }'

          # 시작일 값이 있을 경우 추가
          if [[ ! -z "$START_DATE" ]]; then
            JSON_PAYLOAD=$(echo "$JSON_PAYLOAD" | jq --arg startDate "$START_DATE" '.properties["시작일"] = {"date": {"start": $startDate}}')
          fi

          # 종료일 값이 있을 경우 추가
          if [[ ! -z "$END_DATE" ]]; then
            JSON_PAYLOAD=$(echo "$JSON_PAYLOAD" | jq --arg endDate "$END_DATE" '.properties["종료일"] = {"date": {"start": $endDate}}')
          fi

          # 최종 JSON 구조 확인 (디버깅)
          echo "Final JSON Payload:"
          echo "$JSON_PAYLOAD" | jq .

          curl -X POST "https://api.notion.com/v1/pages" \
          -H "Authorization: Bearer ${{ secrets.NOTION_API_KEY }}" \
          -H "Notion-Version: 2022-06-28" \
          -H "Content-Type: application/json" \
          --data "$JSON_PAYLOAD"
